import 'dart:async';
import 'dart:math';
import 'dart:ui';

import 'package:flutter/material.dart';
import 'package:social_media_template/BeReals/bereal_class.dart';
import 'package:social_media_template/BeReals/bereal_section.dart';
import 'package:social_media_template/BeReals/post_bereal_page.dart';
import 'package:social_media_template/Firebase/beReals.dart';
import 'package:social_media_template/Firebase/storage.dart';
import 'package:social_media_template/Firebase/user.dart';
import 'package:social_media_template/colors.dart';
import 'package:social_media_template/UserProfile/user_class.dart';
import 'package:vector_math/vector_math.dart' as math;

class BeRealsPage extends StatefulWidget {
  BeRealsPage({Key? key}) : super(key: key);

  @override
  State<BeRealsPage> createState() => _BeRealsPageState();
}

class _BeRealsPageState extends State<BeRealsPage> {
  double width1 = 1;
  double width2 = 0;
  double angle1 = 0;
  double angle2 = pi / 2;
  double scale1 = 1;
  double scale2 = 1;
  double startingPostion = 0;
  late double totalLength;
  int currentIndex = 0;
  int index1 = 0;
  int index2 = 1;
  bool reversed = false;

  List<Widget> widgets = <Widget>[
    Container(
      color: Colors.green,
      child: Center(child: Text("Some Text")),
    ),
    Container(
      color: Colors.blue,
      child: Text("Some Text"),
    ),
    Container(
      color: Colors.red,
      child: Center(child: Text("Some Text")),
    ),
    Container(
      color: Colors.orange,
      child: Text("Some Text"),
    ),
    Container(
      color: Colors.purple,
      child: Text("Some Text"),
    ),
    Container(
      color: Colors.pink,
      child: Text("Some Text"),
    ),
    Container(
      color: Colors.green,
      child: Text("Some Text"),
    ),
  ];

  @override
  Widget build(BuildContext context) {
    totalLength = MediaQuery.of(context).size.width;
    return Scaffold(
      backgroundColor: colorBackground,
      body: SafeArea(
          child: GestureDetector(
              onHorizontalDragStart: (details) {
                startingPostion = details.globalPosition.dx;
              },
              onHorizontalDragUpdate: (details) {
                double difference = startingPostion - details.globalPosition.dx;
                double percentage = difference / (totalLength);
                print(scale1);
                setState(() {
                  if (percentage > 0) {
                    
                    width2 = percentage;
                    width1 = 1 - width2;
                    angle1 = percentage * pi / 2;
                    angle2 = -((pi / 2) - angle1);
                    scale1 = 1 / sin(percentage * pi);

                    index1 = currentIndex;
                    index2 = currentIndex + 1;
                    reversed = false;
                  }
                  if (percentage < 0) {
                    width1 = (percentage * -1);
                    width2 = 1 - width1;
                    angle2 = (percentage * pi / 2);
                    angle1 = (angle2 + (pi / 2));
                    scale1 = (1 / sin(percentage * pi));
                    index2 = currentIndex;
                    index1 = currentIndex - 1;
                    reversed = true;
                  }
                });
              },
              onHorizontalDragEnd: (details) {
                setState(() {
                  if (reversed) {
                    if (width2 > width1) {
                      width2 = 1;
                      width1 = 0;
                      angle2 = 0;
                      angle1 = pi / 2;
                    } else {
                      width1 = 1;
                      width2 = 0;
                      angle1 = 0;
                      angle2 = pi / 2;
                      currentIndex--;
                    }
                  } else {
                    if (width1 > width2) {
                      width1 = 1;
                      width2 = 0;
                      angle1 = 0;
                      angle2 = pi / 2;
                    } else {
                      width1 = 0;
                      width2 = 1;
                      angle2 = 0;
                      angle1 = pi / 2;
                      currentIndex++;
                    }
                  }
                });
              },
              child: Row(
                children: [
                  Transform(
                    alignment: Alignment.centerRight,
                    transform: Matrix4.identity()
                      ..setEntry(3, 2, .0005)
                      ..setEntry(2, 3, 10000)
                      ..rotateY(angle1)..scale(scale1, 1, 1),
                    child: Container(
                      width: MediaQuery.of(context).size.width * width1,
                      height: double.infinity,
                      color: Colors.blue,
                      child: widgets[index1],
                    ),
                  ),
                  Transform(
                    alignment: Alignment.centerLeft,
                    transform: Matrix4.identity()
                      ..setEntry(3, 2, .0005)
                      ..rotateY(angle2)..scale(scale1,1,1),
                    child: Container(
                      width: MediaQuery.of(context).size.width * width2,
                      height: double.infinity,
                      color: Colors.red,
                      child: widgets[index2],
                    ),
                  ),
                ],
              ))),
    );
  }
}

class BeRealSection extends StatefulWidget {
  BeRealSection({Key? key, required this.beReal}) : super(key: key);
  BeReal beReal;

  @override
  State<BeRealSection> createState() => _BeRealSectionState();
}

class _BeRealSectionState extends State<BeRealSection> {
  @override
  Widget build(BuildContext context) {
    return Container(
      decoration: BoxDecoration(border: Border.all(color: colorBackground)),
      child: Column(
        children: [
          FutureBuilder(
            future: getUserByID(widget.beReal.user),
            builder: ((context, snapshot) {
              if (snapshot.connectionState == ConnectionState.done) {
                if (snapshot.hasError) {
                  return const Center(
                    child: Text("Error"),
                  );
                } else if (snapshot.hasData) {
                  User user = snapshot.data as User;

                  return Column(
                    children: [
                      Row(
                        children: [
                          BeRealButton(
                            user: user,
                            ringOn: false,
                            nameUnderOne: false,
                            scale: .6,
                          ),
                          Text(
                            user.handle,
                            style: nameStyle,
                          )
                        ],
                      ),
                      TestingWidget(beReal: widget.beReal),
                    ],
                  );
                }
              }

              return const Center(
                child: CircularProgressIndicator(),
              );
            }),
          ),
        ],
      ),
    );
  }
}

class TestingWidget extends StatefulWidget {
  TestingWidget({Key? key, required this.beReal}) : super(key: key);
  BeReal beReal;

  @override
  State<TestingWidget> createState() => _TestingWidgetState();
}

class _TestingWidgetState extends State<TestingWidget> {
  @override
  Widget build(BuildContext context) {
    return FutureBuilder(
        future: getBeRealPicturesURLs(
            widget.beReal.photoURLs[1], widget.beReal.photoURLs[0]),
        builder: ((context, snapshot) {
          if (snapshot.connectionState == ConnectionState.done) {
            if (snapshot.hasError) {
              return const Center(
                child: Text("Error"),
              );
            } else if (snapshot.hasData) {
              List<String> urls = snapshot.data as List<String>;

              return BeRealPictures(
                  image1: DecorationImage(image: NetworkImage(urls[0])),
                  image2: DecorationImage(image: NetworkImage(urls[1])));
            }
          }

          return const Center(
            child: CircularProgressIndicator(),
          );
        }));
  }
}

class BeRealBuilder extends StatefulWidget {
  BeRealBuilder({Key? key}) : super(key: key);

  @override
  State<BeRealBuilder> createState() => _BeRealBuilderState();
}

class _BeRealBuilderState extends State<BeRealBuilder> {
  @override
  Widget build(BuildContext context) {
    return FutureBuilder(
      future: getBeReals(),
      builder: ((context, snapshot) {
        if (snapshot.connectionState == ConnectionState.done) {
          if (snapshot.hasError) {
            return const Center(
              child: Text("Error"),
            );
          } else if (snapshot.hasData) {
            List<BeReal> beReals = snapshot.data as List<BeReal>;

            List<Widget> test = List<Widget>.generate(beReals.length,
                (int index) => BeRealSection(beReal: beReals[index]));

            return ListView(
              scrollDirection: Axis.horizontal,
              shrinkWrap: true,
              children: test,
            );
          }
        }

        return const Center(
          child: CircularProgressIndicator(),
        );
      }),
    );
  }
}
